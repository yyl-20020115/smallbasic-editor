// <copyright file="JSInterop.Generated.cs" company="MIT License">
// Licensed under the MIT License. See LICENSE file in the project root for license information.
// </copyright>

/// <summary>
/// This file is auto-generated by a build task. It shouldn't be edited by hand.
/// </summary>
namespace SmallBasic.Editor.Interop
{
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.JSInterop;
    using SmallBasic.Compiler.Services;

    internal static class JSInteropUtil
    {
        public static class Layout
        {
            public static async Task InitializeWebView(string locale, string title)
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Layout.initializeWebView", locale, title).ConfigureAwait(false);
            }

            public static async Task OpenExternalLink(string url)
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Layout.openExternalLink", url).ConfigureAwait(false);
            }

            public static async Task ShowMessage(string title, string text)
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Layout.showMessage", title, text).ConfigureAwait(false);
            }

            public static Task<decimal> GetElementHeight(ElementRef element)
            {
                return null;//return JSRuntime.Current.InvokeAsync<decimal>("JSInterop.Layout.getElementHeight", element);
            }

            public static Task<decimal> GetElementWidth(ElementRef element)
            {
                return null;//return JSRuntime.Current.InvokeAsync<decimal>("JSInterop.Layout.getElementWidth", element);
            }

            public static async Task ScrollIntoView(ElementRef element)
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Layout.scrollIntoView", element).ConfigureAwait(false);
            }

            public static async Task Focus(ElementRef element)
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Layout.focus", element).ConfigureAwait(false);
            }
        }

        public static class Monaco
        {
            public static async Task Initialize(ElementRef editorElement, string initialValue, bool isReadOnly)
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Monaco.initialize", editorElement, initialValue, isReadOnly).ConfigureAwait(false);
            }

            public static async Task Dispose()
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Monaco.dispose").ConfigureAwait(false);
            }

            public static async Task SelectRange(MonacoRange range)
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Monaco.selectRange", range).ConfigureAwait(false);
            }

            public static async Task HighlightLine(decimal line)
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Monaco.highlightLine", line).ConfigureAwait(false);
            }

            public static async Task RemoveDecorations()
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Monaco.removeDecorations").ConfigureAwait(false);
            }

            public static async Task SaveToFile()
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Monaco.saveToFile").ConfigureAwait(false);
            }

            public static async Task OpenFile(string confirmationMessage)
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Monaco.openFile", confirmationMessage).ConfigureAwait(false);
            }

            public static async Task ClearEditor(string confirmationMessage)
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Monaco.clearEditor", confirmationMessage).ConfigureAwait(false);
            }

            public static async Task Cut()
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Monaco.cut").ConfigureAwait(false);
            }

            public static async Task Copy()
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Monaco.copy").ConfigureAwait(false);
            }

            public static async Task Paste()
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Monaco.paste").ConfigureAwait(false);
            }

            public static async Task Undo()
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Monaco.undo").ConfigureAwait(false);
            }

            public static async Task Redo()
            {
                //await JSRuntime.Current.InvokeAsync<bool>("JSInterop.Monaco.redo").ConfigureAwait(false);
            }
        }
    }
}
